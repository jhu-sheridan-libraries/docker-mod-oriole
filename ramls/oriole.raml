#%RAML 1.0
title: Oriole
version: v1
baseUri: https://github.com/jhu-sheridan-libraries/mod-oriole

documentation:
  - title: mod-oriole API
    content: This module provide a backend for the Oriole database tool

types:
  resource: !include schemas/resource.json
  stanzas: !include schemas/stanzas.json
  resourceCollection: !include schemas/resources.json
  tagCollection:
    type: object
    properties:
      tags:
        type: string[]
  customFile:
    type: file
    fileTypes: ['*/*'] # any file type allowed
    maxLength: 1048576
  subject: !include schemas/subject.json
  subjectCollection: !include schemas/subjects.json
  errors: !include raml-util/schemas/errors.schema

traits:
  orderable: !include raml-util/traits/orderable.raml
  validate: !include raml-util/traits/validation.raml
  pageable: !include raml-util/traits/pageable.raml
  searchable: !include raml-util/traits/searchable.raml
  language: !include raml-util/traits/language.raml
  facets: !include raml-util/traits/facets.raml

resourceTypes:
  collection: !include raml-util/rtypes/collection.raml
  collection-item: !include raml-util/rtypes/item-collection.raml
  get-only: !include raml-util/rtypes/get-only.raml

/oriole:
  /databases:
    displayName: Resources
    description: Resources Collection
    type:
      collection:
        schemaCollection: resourceCollection
        schemaItem: resource
        exampleCollection: !include examples/resources.json
        exampleItem: !include examples/resource.json
    get:
      is: [
        searchable: { description: "with valid searchable fields: for example keyword=physics", example: "keyword=chemistry" },
        pageable,
        validate,
        facets
      ]
      responses:
    /{resourceId}:
      displayName: Resource
      description: Get, Delete or Update a specific resource
      type:
        collection-item:
          schema: resource
          exampleItem: !include examples/resource.json
      get:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:
  /resources:
    displayName: Resources
    description: Resources Collection
    type:
      collection:
        schemaCollection: resourceCollection
        schemaItem: resource
        exampleCollection: !include examples/resources.json
        exampleItem: !include examples/resource.json
    post:
      is: [ validate ]
    get:
      is: [
        searchable: { description: "with valid searchable fields: for example keyword=physics", example: "keyword=chemistry" },
        pageable,
        validate,
        facets
      ]
      responses:
    /{resourceId}:
      displayName: Resource
      description: Get, Delete or Update a specific resource
      type:
        collection-item:
          schema: resource
          exampleItem: !include examples/resource.json
      get:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:
      put:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:
      delete:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:

  /tags:
    displayName: Tags
    description: Get all tags
    get:
      responses:
        200:
          body:
            application/json:
              type: tagCollection

  /subjects:
    type:
      collection:
        exampleCollection: !include examples/subjects.json
        exampleItem: !include examples/subject.json
        schemaCollection: subjectCollection
        schemaItem: subject
    get:
      is: [
        searchable: {description: "with valid searchable fields", example: "name=aaa"},
        pageable
      ]
      description: Return a list of subjects
      responses:
        400:
          description: "Bad request"
          body:
            text/plain:
        401:
          description: "Not authorized to perform requested action"
          body:
            text/plain:
    post:
      description: Create a new subject
      is: [validate]
    delete:
      description: "Delete all subjects"
      is: [language]
      responses:
        204:
          description: "All subjects deleted"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
    /{subjectId}:
      description: Pass in the subject code
      type:
        collection-item:
          exampleItem: !include examples/subject.json
          schema: subject
      get:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:
      put:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:
      delete:
        is: [ validate ]
        responses:
          400:
            description: "Bad request"
            body:
              text/plain:
          401:
            description: "Not authorized to perform requested action"
            body:
              text/plain:







